// Code generated by go-bindata.
// sources:
// public/app.js
// public/index.html
// public/style.css
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _publicAppJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x55\x51\x6f\xdb\x36\x10\x7e\xf7\xaf\xb8\x66\x03\x28\xc3\x9e\x14\x0c\xd8\x8b\x1d\x05\xe8\xba\x00\x6d\xd1\xac\x43\xd3\x6d\xd8\x23\x2d\x9e\x25\x76\x14\x29\xf0\x4e\xd6\xb2\x21\xff\x7d\x20\x25\xcb\x8a\xad\x60\x18\xaa\x27\xea\x74\xf7\xf1\xe3\xf7\x1d\x4f\x16\x3b\xf8\xad\xc5\xe4\x9f\x05\x00\x00\x9a\x0d\x88\x6f\x64\xd3\x88\xf5\x22\x06\x94\x64\xb9\x81\xfe\x63\x78\x3a\xda\x80\x6d\x8d\x59\x43\x96\xc1\xc7\xd6\x43\x87\x3b\x72\xc5\x9f\xc8\x63\x8a\xc5\xee\x9e\xca\x0d\x08\x11\x93\xde\x3a\xa3\x28\x04\xa1\x46\x22\x59\x22\x01\x3b\xd8\x21\x10\x5a\x0e\x4b\xae\xc2\xda\x1f\xd0\x8f\x10\x45\x25\xf9\x8d\xb3\x8c\x96\x47\x9c\xd7\xe0\x5b\x6b\xb5\x2d\xc1\x68\x62\x70\xfb\x98\x75\x02\x55\x9a\x1a\x23\x1f\x51\x81\xb3\x3d\x66\xe1\x11\xed\x88\x89\xb5\xd4\x66\x42\xfe\x2e\xbc\x83\x54\xca\x23\x11\xb4\x84\x0a\xf6\xce\x43\xe9\xe5\x6e\x17\x76\x91\x16\xe4\x41\xb2\x3c\xb1\x6a\x09\xbd\x95\x35\x9e\x29\x70\x0c\x8f\x79\x5f\x9c\xb6\xa8\x36\xb0\x97\x86\x30\x64\x7d\xf6\x2d\x82\xde\xf7\x14\x40\x5a\x35\xd6\x40\x25\x0f\x08\x3b\x44\x0b\x7b\x6d\x0c\x2a\xd0\x3d\xe3\xa7\x41\xff\xc2\xa3\xe4\x08\xd6\xda\x82\xb5\xb3\xc9\x72\xe2\xc6\x41\x7a\x20\x34\x7b\xc8\x81\x2b\x4d\xdb\xf1\x43\x78\x4b\x3b\x82\x3c\x0a\xff\x3b\xee\x1e\xa2\x47\x89\xe8\x68\x93\x65\x02\x56\xd0\x69\xab\x5c\x97\x1a\x57\xc8\x00\x9b\x56\x8e\x18\x56\x20\xb2\x8e\xc4\xf2\x02\x28\x95\x4a\xdd\x1d\xd0\xf2\x07\x4d\x8c\x16\x7d\x22\x06\xe1\xc5\xfa\x44\x0d\xa7\xdc\x8e\xfc\x6a\x2a\x21\x87\xf7\x0f\x1f\x7f\x4e\x1b\xe9\x09\x13\x4c\x43\x53\x4d\xf6\x08\x4f\x38\x45\x3a\xb1\x1d\x56\x39\x88\x1b\xa5\x0f\x50\x18\x49\x94\x5f\x15\x95\x6e\xae\x6e\xc5\xb3\xa2\xe3\xb3\x02\x71\xa3\xeb\x12\xc8\x17\xf9\x55\x38\x5c\x44\x2b\x7d\xef\xdf\xaf\x9f\x3e\x24\x35\x95\x69\x54\x7f\x19\x92\xaf\x6e\x45\xec\xa8\xe7\xf6\x3e\x47\x0c\x15\x17\xce\x4e\x37\xcc\x94\x3e\xcc\xf0\x59\x01\xd6\xee\x8b\x76\x16\x53\x76\xef\x6a\x59\x62\xdc\x7c\x50\x2b\x6e\x7f\xb3\xf3\xd9\xad\xd8\x06\x0a\xbf\x04\x45\xfa\x0a\x5a\x5c\x48\x87\x06\xeb\xa0\x45\x0e\xca\x15\x6d\x58\xa6\x25\xf2\x5d\x1f\xfd\xf1\xf1\x9d\x4a\x44\x90\xec\xbb\xe3\x1d\x10\x67\xa2\x0e\xf5\x29\x15\xde\x19\xf3\xd9\x35\x90\x9f\xc5\xde\xa2\x2e\x2b\x8e\x54\x5e\xb7\xec\xa0\x8f\x1e\x6f\xe5\xce\x31\xbb\x7a\x84\x7c\x1a\xe0\x8f\xbd\x59\x23\x57\x4e\xd1\x74\x3c\x10\xda\x49\xaf\x42\x72\xde\x10\x7a\x0f\x49\x6c\xa9\x7e\x48\xc0\xab\x1c\x84\x38\x4f\x82\x49\xdf\x05\xc0\x64\xd6\xa2\xd8\x51\xc4\x5e\xdb\x52\xef\x1f\x93\x4b\x88\x51\x85\xfe\xe2\x47\xc4\xb8\x5e\xbf\x98\x7a\xba\xe1\x31\xfb\xf8\xfa\x72\xc1\xa0\xfc\x06\xbe\x4d\xc4\x4d\x73\x2b\x96\x69\xc5\xb5\x99\x1e\x71\x99\x32\xfe\xc5\xc9\x32\x48\xfc\xc0\x5e\x37\xe0\x5a\x86\x90\x35\x0b\xfa\x74\x11\x5d\x9e\x99\x3a\xaa\x33\x48\x18\x14\x8c\x06\x7e\x42\x42\x1e\xa6\xef\x62\x1e\xf3\xe8\x1c\x0c\x53\xea\xbf\xac\x7a\x75\x12\x6d\xce\xa4\x7b\xc9\xe8\xb5\x34\xfa\xef\xd0\xec\x92\x38\x11\x7f\xb8\x16\xea\x96\x18\xd0\x32\xfa\x30\x44\x63\xb5\x58\xc3\xf7\xd7\xd7\xd7\x33\x47\xf1\xc8\xad\xb7\x2f\xf0\x7d\xce\xe3\x68\xc7\xff\xa5\x52\x54\xce\x11\x82\x1c\xed\xfd\x0a\x36\x27\x41\x20\x9f\x33\xbd\xd7\x6a\xf0\x7c\x7b\x59\x3a\x0e\xfe\xd9\xea\xf1\x84\x2f\x03\xf4\x3f\x97\x30\xf0\x7d\x8b\xdb\x59\x67\x27\x83\x6f\xf2\xdf\x98\x75\xb1\x3f\x2f\x88\x8a\xb9\xd9\x64\x59\xd7\x75\xe3\xd8\x4c\x0b\x57\x67\xfd\x32\xfe\x30\xde\xf8\xc7\x86\xdd\xfb\x87\xf4\xfe\xa7\x1f\x06\xb0\xc9\xf6\xfd\x60\x58\x3c\x2d\xb7\xff\x06\x00\x00\xff\xff\x02\xff\x84\x86\x51\x08\x00\x00")

func publicAppJsBytes() ([]byte, error) {
	return bindataRead(
		_publicAppJs,
		"public/app.js",
	)
}

func publicAppJs() (*asset, error) {
	bytes, err := publicAppJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/app.js", size: 2129, mode: os.FileMode(511), modTime: time.Unix(1483552380, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _publicIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x56\x4b\x6f\xdc\x36\x10\xbe\xef\xaf\x60\x78\x6a\x51\x88\xac\x37\x7d\xb8\x85\xb4\x35\xe0\xa6\x40\x0b\x04\x2d\x90\xe4\xd0\x23\x97\x1c\x49\x94\x29\x92\xe5\x8c\xe4\x6c\x7e\x7d\xa1\x97\xd7\x96\x1f\x5d\x1b\x06\x7a\x5a\xf2\xe3\xec\x7c\xdf\x3c\xa8\x61\xfe\xe6\xd7\x3f\x2f\x3f\xfe\xfd\xd7\x3b\x56\x53\xeb\x76\x9b\x7c\xf8\x61\x4e\xf9\xaa\xe0\xe0\xf9\x00\x80\x32\xbb\x0d\x63\x8c\xe5\x2d\x90\x62\xba\x56\x09\x81\x0a\xfe\xe9\xe3\x6f\xd9\x39\x9f\x8f\xc8\x92\x83\xdd\x07\xdb\x46\x07\xec\xb2\x56\x94\xcb\x09\xda\x4c\xe7\xce\xfa\x2b\x96\xc0\x15\x1c\xe9\xe0\x00\x6b\x00\xe2\xac\x4e\x50\x16\xbc\x26\x8a\xf8\xb3\x94\xda\xf8\x06\x85\x76\xa1\x33\xa5\x53\x09\x84\x0e\xad\x54\x8d\xfa\x2c\x9d\xdd\xa3\x6c\x15\x41\xb2\xca\xd9\x2f\x20\xbf\x15\x3f\xfd\x28\xce\xa5\xc6\x3b\xb0\x68\xad\x17\x1a\x71\x11\x75\x0a\x69\x19\x3c\xa1\xa8\x42\xa8\x1c\xa8\x68\x71\x24\xb5\x3a\xf8\x5f\x4a\xd5\x5a\x77\x28\xde\xcf\xfe\xbf\xf9\x5d\x07\xff\x2c\xd7\xda\x78\xd1\xa0\x01\x67\xfb\x24\x3c\x90\x84\x36\x34\x36\x78\x90\x5b\xb1\x15\x3f\x48\x85\x08\x84\x63\x10\xcb\xc9\x4d\x04\xf2\x04\x1e\x39\x42\x73\xc0\x9b\x5c\x4e\x95\xca\xf7\xc1\x1c\xe6\xba\x41\x9a\xdd\x78\xd5\x4f\xab\x71\x67\x6c\xcf\xb4\x53\x88\x05\xf7\xaa\xcf\xae\x93\x8a\x11\x12\x3f\x5a\x8c\x56\x6a\xa1\xe1\x8b\xf1\x3e\x29\x6f\x32\x17\xaa\xc0\x92\xad\x6a\xe2\x77\x0b\xae\x6e\x51\x48\x63\x67\xc6\x5c\x8e\xe4\x93\xbc\x41\x50\xde\x2a\xeb\x99\x35\x05\x57\x31\x2e\xf9\xbc\x25\x29\x85\x6b\xfe\xb0\x58\x1d\x1c\xc3\xb3\xed\x5a\xe8\x6d\x0b\x95\x0c\xab\x43\xb2\x5f\x82\x27\xe5\x56\x96\x37\xd6\x03\xb9\xae\x15\x65\x2d\x20\xaa\x0a\x90\xdf\x76\x90\xe9\xe0\x09\x3c\x71\xd6\x67\xc3\x75\x98\x6c\x2f\x67\xf0\x01\x97\xc7\x60\x1f\x81\xee\xa4\xe3\xb8\x5c\x05\xcd\xfa\xcc\x96\x05\x6f\x82\xf5\x60\x1e\x49\x81\xf5\xb1\xa3\xac\xb4\xe0\x0c\x1b\xd3\x71\xbe\xce\xc6\x68\xc1\xe8\x10\xa1\xe0\x04\x9f\xc7\x28\xda\x60\x86\x16\xf2\x70\xfd\x1e\x2b\xce\x2e\xae\xe0\xd0\x45\x01\x9e\x20\x15\x1c\xc1\xdf\x61\x5b\x49\x7f\x8a\xfc\xbb\x35\xf9\xbe\x23\x0a\x7e\xb1\xbf\x56\x3d\x60\x06\x65\x09\x9a\xd8\xb4\x71\x43\xdf\xb0\x3d\x79\xce\x2e\xb4\xb3\xfa\xea\x1e\xff\x31\x90\xc5\xcd\x72\xc3\xb3\xe1\x5a\xe2\xd2\x7a\x7a\xec\x39\x7b\xff\x8f\x1f\xc0\x9b\x55\x31\x26\x59\x2f\xac\xc7\x9b\x57\x2c\x08\xb4\xca\xba\x9b\x8a\x08\x4a\xb6\xbd\x01\xa3\x53\x1a\xea\xe0\xcc\x50\x94\x77\x23\xf6\xb2\xaa\x9c\xde\x12\xb3\x80\x0e\x21\x79\xd5\xc2\x4a\xc3\xa7\x05\xfe\x1f\x9b\x63\xc8\xfd\x57\x5f\xbf\xa0\x3d\x4c\xf0\xf0\x60\x7b\xfc\x11\xac\x7f\x76\x7b\xe4\x72\xf8\x68\xed\x36\x79\x19\x02\x41\x5a\xa8\xa3\xaa\x20\x9b\xa0\x61\x54\xca\x69\xb9\xdb\xe4\xa8\x93\x8d\xc4\x30\xe9\xe3\x38\xe8\x7c\xbc\xaa\xc6\xf1\xd2\x77\x70\xb1\x15\x67\xe2\xad\x34\x16\x69\xd8\x8e\xdf\xfd\x06\xf9\x2e\x97\xd3\x5f\x1f\xf1\xf1\x5f\x23\xc5\xd9\xbd\x6c\x56\xe3\xe4\x14\xb7\xc1\x80\x68\xfe\xe9\x20\x1d\x46\x81\xd3\x32\x1b\x34\x9e\x3d\x43\xda\x53\xd3\x5b\xa7\x43\xa4\x90\x35\x28\xdf\x8a\x33\xb1\x95\x29\x38\xd7\x45\x94\xad\xf9\xfe\x15\xbc\x3f\xf0\x36\x68\xee\x3f\x0d\x9e\xe0\x91\x2a\xc6\xf5\xb9\x9c\x27\xa9\x1c\x9f\x46\xff\x06\x00\x00\xff\xff\xdb\x01\x01\xfb\x2a\x09\x00\x00")

func publicIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_publicIndexHtml,
		"public/index.html",
	)
}

func publicIndexHtml() (*asset, error) {
	bytes, err := publicIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/index.html", size: 2346, mode: os.FileMode(511), modTime: time.Unix(1483552380, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _publicStyleCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\xce\x41\x0e\x83\x20\x10\x85\xe1\x3d\xa7\x78\x49\xd3\x25\x89\x6e\xba\xc0\xd3\x50\x40\x99\x04\x98\x46\x50\x6b\x1a\xef\xde\x88\xda\xa4\xdb\x8f\x3f\xbc\x79\xb2\x5d\xf1\x11\x00\x60\x29\xbf\x82\x5e\x15\xfa\xe0\xde\x5d\xa5\x48\x49\x7a\x47\x83\x2f\x0a\x6d\xd3\xcc\xfe\xe0\x3d\x90\x96\x46\x67\x0a\x71\x52\x30\x1c\xa6\x98\x3a\xb1\x09\x11\x35\xa5\xf3\xbf\xbd\x52\x68\xd1\x40\x4f\x85\xeb\xeb\xcd\x78\x5d\x64\x74\x39\xeb\xc1\xe5\xb3\xfb\x1f\xb9\x36\x2e\x79\xfc\x64\x21\x5b\x7c\xbd\xe3\x7e\x00\xcf\x6e\xec\x03\x2f\x72\x55\xc8\x66\xe4\x10\x3a\xb1\x7d\x03\x00\x00\xff\xff\xa4\x44\x4d\x2f\xd1\x00\x00\x00")

func publicStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_publicStyleCss,
		"public/style.css",
	)
}

func publicStyleCss() (*asset, error) {
	bytes, err := publicStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/style.css", size: 209, mode: os.FileMode(511), modTime: time.Unix(1483552380, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"public/app.js": publicAppJs,
	"public/index.html": publicIndexHtml,
	"public/style.css": publicStyleCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"public": &bintree{nil, map[string]*bintree{
		"app.js": &bintree{publicAppJs, map[string]*bintree{}},
		"index.html": &bintree{publicIndexHtml, map[string]*bintree{}},
		"style.css": &bintree{publicStyleCss, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

